Line 1: type_specifier : INT
int
Line 1: declaration_list : ID
x
Line 1: declaration_list : declaration_list COMMA ID
x,y
Line 1: declaration_list : declaration_list COMMA ID
x,y,z
Line 1: var_declaration : type_specifier declaration_list SEMICOLON
int x,y,z;
Line 1: unit : var_declaration
int x,y,z;
Line 1: program : unit
int x,y,z;
Line 2: type_specifier : FLOAT
float
Line 2: declaration_list : ID
ab
Line 2: var_declaration : type_specifier declaration_list SEMICOLON
float ab;
Line 2: unit : var_declaration
float ab;
Line 2: program : program unit
int x,y,z;
float ab;
Line 4: type_specifier : VOID
void
Line 4: func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON
void foo();
Line 4: unit : func_declaration
void foo();
Line 4: program : program unit
int x,y,z;
float ab;
void foo();
Line 5: type_specifier : INT
int
Line 5: type_specifier : INT
int
Line 5: parameter_list : type_specifier ID
int a
Line 5: type_specifier : INT
int
Line 5: parameter_list : parameter_list COMMA type_specifier ID
int a,int b
Line 5: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
intvar(int a,int b);
Line 5: unit : func_declaration
intvar(int a,int b);
Line 5: program : program unit
int x,y,z;
float ab;
void foo();
intvar(int a,int b);
Line 7: type_specifier : INT
int
Line 7: type_specifier : INT
int
Line 7: parameter_list : type_specifier ID
int a
Line 7: type_specifier : INT
int
Line 7: parameter_list : parameter_list COMMA type_specifier ID
int a,int b
Line 8: variable : ID
a
Line 8: variable : ID
a
Line 8: factor : variable
a
Line 8: unary_expression : factor
a
Line 8: term : unary_expression
a
Line 8: simple_expression : term
a
Line 8: variable : ID
y
Line 8: factor : variable
y
Line 8: unary_expression : factor
y
Line 8: term : unary_expression
y
Line 8: factor : CONST_INT
2
Line 8: unary_expression : factor
2
Line 8: term : term MULOP unary_expression
y*2
Line 8: simple_expression : simple_expression ADDOP term
a+y*2
Line 8: rel_expression : simple_expression
a+y*2
Line 8: logic_expression : rel_expression
a+y*2
Line 8: expression : variable ASSIGNOP logic_expression
a=a+y*2
Line 8: expression_statement : expression SEMICOLON
a=a+y*2;
Line 8: statement : expression_statement
a=a+y*2;
Line 8: statements : statement
a=a+y*2;
Line 9: variable : ID
a
Line 9: factor : variable
a
Line 9: unary_expression : factor
a
Line 9: term : unary_expression
a
Line 9: simple_expression : term
a
Line 9: variable : ID
b
Line 9: factor : variable
b
Line 9: unary_expression : factor
b
Line 9: term : unary_expression
b
Line 9: simple_expression : simple_expression ADDOP term
a+b
Line 9: rel_expression : simple_expression
a+b
Line 9: logic_expression : rel_expression
a+b
Line 9: expression : logic_expression
a+b
Line 9: statement : RETURN expression SEMICOLON
return a+b;
Line 9: statements : statements statement
a=a+y*2;
return a+b;
Line 10: compound_statement : LCURL statements RCURL
{
a=a+y*2;
return a+b;
}

ScopeTable # 1.1 
4 -->  < a : ID> 
5 -->  < b : ID> 

ScopeTable # 1 
3 -->  < var : ID> 
17 -->  < ab : ID> 
24 -->  < foo : ID> 
27 -->  < x : ID> 
28 -->  < y : ID> 
29 -->  < z : ID> 
Line 10: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
int var(int a,int b){
a=a+y*2;
return a+b;
}
Line 10: unit : func_definition
int var(int a,int b){
a=a+y*2;
return a+b;
}
Line 10: program : program unit
int x,y,z;
float ab;
void foo();
intvar(int a,int b);
int var(int a,int b){
a=a+y*2;
return a+b;
}
Line 12: type_specifier : VOID
void
Line 13: variable : ID
x
Line 13: factor : CONST_INT
2
Line 13: unary_expression : factor
2
Line 13: term : unary_expression
2
Line 13: simple_expression : term
2
Line 13: rel_expression : simple_expression
2
Line 13: logic_expression : rel_expression
2
Line 13: expression : variable ASSIGNOP logic_expression
x=2
Line 13: expression_statement : expression SEMICOLON
x=2;
Line 13: statement : expression_statement
x=2;
Line 13: statements : statement
x=2;
Line 14: variable : ID
y
Line 14: variable : ID
x
Line 14: factor : variable
x
Line 14: unary_expression : factor
x
Line 14: term : unary_expression
x
Line 14: simple_expression : term
x
Line 14: factor : CONST_INT
5
Line 14: unary_expression : factor
5
Line 14: term : unary_expression
5
Line 14: simple_expression : simple_expression ADDOP term
x-5
Line 14: rel_expression : simple_expression
x-5
Line 14: logic_expression : rel_expression
x-5
Line 14: expression : variable ASSIGNOP logic_expression
y=x-5
Line 14: expression_statement : expression SEMICOLON
y=x-5;
Line 14: statement : expression_statement
y=x-5;
Line 14: statements : statements statement
x=2;
y=x-5;
Line 15: compound_statement : LCURL statements RCURL
{
x=2;
y=x-5;
}

ScopeTable # 1.2 

ScopeTable # 1 
3 -->  < var : ID> 
17 -->  < ab : ID> 
24 -->  < foo : ID> 
27 -->  < x : ID> 
28 -->  < y : ID> 
29 -->  < z : ID> 
Line 15: func_definition : type_specifier ID LPAREN RPAREN compound_statement
void foo(){
x=2;
y=x-5;
}
Line 15: unit : func_definition
void foo(){
x=2;
y=x-5;
}
Line 15: program : program unit
int x,y,z;
float ab;
void foo();
intvar(int a,int b);
int var(int a,int b){
a=a+y*2;
return a+b;
}
void foo(){
x=2;
y=x-5;
}
Line 17: type_specifier : INT
int
Line 18: type_specifier : INT
int
Line 18: declaration_list : ID
c
Line 18: declaration_list : declaration_list COMMA ID
c,i
Line 18: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD
c,i,a[2]
Line 18: declaration_list : declaration_list COMMA ID
c,i,a[2],j
Line 18: var_declaration : type_specifier declaration_list SEMICOLON
int c,i,a[2],j;
Line 18: statement : var_declaration
int c,i,a,j;
Line 18: statements : statement
int c,i,a,j;
Line 18: type_specifier : FLOAT
float
Line 18: declaration_list : ID
d
Line 18: var_declaration : type_specifier declaration_list SEMICOLON
float d;
Line 18: statement : var_declaration
float d;
Line 18: statements : statements statement
int c,i,a,j;
float d;
Line 19: variable : ID
c
Line 19: factor : CONST_INT
4
Line 19: unary_expression : factor
4
Line 19: term : unary_expression
4
Line 19: simple_expression : term
4
Line 19: rel_expression : simple_expression
4
Line 19: logic_expression : rel_expression
4
Line 19: expression : variable ASSIGNOP logic_expression
c=4
Line 19: expression_statement : expression SEMICOLON
c=4;
Line 19: statement : expression_statement
c=4;
Line 19: statements : statements statement
int c,i,a,j;
float d;
c=4;
Line 20: variable : ID
d
Line 20: factor : CONST_FLOAT
9.5
Line 20: unary_expression : factor
9.5
Line 20: term : unary_expression
9.5
Line 20: simple_expression : term
9.5
Line 20: rel_expression : simple_expression
9.5
Line 20: logic_expression : rel_expression
9.5
Line 20: expression : variable ASSIGNOP logic_expression
d=9.5
Line 20: expression_statement : expression SEMICOLON
d=9.5;
Line 20: statement : expression_statement
d=9.5;
Line 20: statements : statements statement
int c,i,a,j;
float d;
c=4;
d=9.5;
Line 21: variable : ID
j
Line 21: factor : CONST_INT
9
Line 21: unary_expression : factor
9
Line 21: term : unary_expression
9
Line 21: simple_expression : term
9
Line 21: rel_expression : simple_expression
9
Line 21: logic_expression : rel_expression
9
Line 21: expression : variable ASSIGNOP logic_expression
j=9
Line 21: expression_statement : expression SEMICOLON
j=9;
Line 21: statement : expression_statement
j=9;
Line 21: statements : statements statement
int c,i,a,j;
float d;
c=4;
d=9.5;
j=9;
Line 24: factor : CONST_INT
0
Line 24: unary_expression : factor
0
Line 24: term : unary_expression
0
Line 24: simple_expression : term
0
Line 24: rel_expression : simple_expression
0
Line 24: logic_expression : rel_expression
0
Line 24: expression : logic_expression
0
Line 24: variable : ID LTHIRD expression RTHIRD 
a[0]
Line 24: factor : CONST_INT
1
Line 24: unary_expression : factor
1
Line 24: term : unary_expression
1
Line 24: simple_expression : term
1
Line 24: rel_expression : simple_expression
1
Line 24: logic_expression : rel_expression
1
Line 24: expression : variable ASSIGNOP logic_expression
a[0]=1
Line 24: expression_statement : expression SEMICOLON
a[0]=1;
Line 24: statement : expression_statement
a[0]=1;
Li